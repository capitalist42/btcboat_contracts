/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IVersionRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "addVersion" | "cancelVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VersionAdded" | "VersionCanceled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVersion",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVersion",
    values: [BytesLike, BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "addVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelVersion",
    data: BytesLike
  ): Result;
}

export namespace VersionAddedEvent {
  export type InputTuple = [
    id: BytesLike,
    version: BytesLike,
    value: string,
    time: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    version: string,
    value: string,
    time: bigint
  ];
  export interface OutputObject {
    id: string;
    version: string;
    value: string;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VersionCanceledEvent {
  export type InputTuple = [id: BytesLike, version: BytesLike, reason: string];
  export type OutputTuple = [id: string, version: string, reason: string];
  export interface OutputObject {
    id: string;
    version: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVersionRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IVersionRegistry;
  waitForDeployment(): Promise<this>;

  interface: IVersionRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVersion: TypedContractMethod<
    [id: BytesLike, version: BytesLike, value: string],
    [void],
    "nonpayable"
  >;

  cancelVersion: TypedContractMethod<
    [id: BytesLike, version: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVersion"
  ): TypedContractMethod<
    [id: BytesLike, version: BytesLike, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelVersion"
  ): TypedContractMethod<
    [id: BytesLike, version: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "VersionAdded"
  ): TypedContractEvent<
    VersionAddedEvent.InputTuple,
    VersionAddedEvent.OutputTuple,
    VersionAddedEvent.OutputObject
  >;
  getEvent(
    key: "VersionCanceled"
  ): TypedContractEvent<
    VersionCanceledEvent.InputTuple,
    VersionCanceledEvent.OutputTuple,
    VersionCanceledEvent.OutputObject
  >;

  filters: {
    "VersionAdded(bytes32,bytes32,string,uint256)": TypedContractEvent<
      VersionAddedEvent.InputTuple,
      VersionAddedEvent.OutputTuple,
      VersionAddedEvent.OutputObject
    >;
    VersionAdded: TypedContractEvent<
      VersionAddedEvent.InputTuple,
      VersionAddedEvent.OutputTuple,
      VersionAddedEvent.OutputObject
    >;

    "VersionCanceled(bytes32,bytes32,string)": TypedContractEvent<
      VersionCanceledEvent.InputTuple,
      VersionCanceledEvent.OutputTuple,
      VersionCanceledEvent.OutputObject
    >;
    VersionCanceled: TypedContractEvent<
      VersionCanceledEvent.InputTuple,
      VersionCanceledEvent.OutputTuple,
      VersionCanceledEvent.OutputObject
    >;
  };
}

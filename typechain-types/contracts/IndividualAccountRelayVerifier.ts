/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    relayHub: AddressLike;
    from: AddressLike;
    to: AddressLike;
    tokenContract: AddressLike;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    tokenAmount: BigNumberish;
    tokenGas: BigNumberish;
    validUntilTime: BigNumberish;
    data: BytesLike;
  };

  export type ForwardRequestStructOutput = [
    relayHub: string,
    from: string,
    to: string,
    tokenContract: string,
    value: bigint,
    gas: bigint,
    nonce: bigint,
    tokenAmount: bigint,
    tokenGas: bigint,
    validUntilTime: bigint,
    data: string
  ] & {
    relayHub: string;
    from: string;
    to: string;
    tokenContract: string;
    value: bigint;
    gas: bigint;
    nonce: bigint;
    tokenAmount: bigint;
    tokenGas: bigint;
    validUntilTime: bigint;
    data: string;
  };
}

export declare namespace EnvelopingTypes {
  export type RelayDataStruct = {
    gasPrice: BigNumberish;
    feesReceiver: AddressLike;
    callForwarder: AddressLike;
    callVerifier: AddressLike;
  };

  export type RelayDataStructOutput = [
    gasPrice: bigint,
    feesReceiver: string,
    callForwarder: string,
    callVerifier: string
  ] & {
    gasPrice: bigint;
    feesReceiver: string;
    callForwarder: string;
    callVerifier: string;
  };

  export type RelayRequestStruct = {
    request: IForwarder.ForwardRequestStruct;
    relayData: EnvelopingTypes.RelayDataStruct;
  };

  export type RelayRequestStructOutput = [
    request: IForwarder.ForwardRequestStructOutput,
    relayData: EnvelopingTypes.RelayDataStructOutput
  ] & {
    request: IForwarder.ForwardRequestStructOutput;
    relayData: EnvelopingTypes.RelayDataStructOutput;
  };
}

export interface IndividualAccountRelayVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptToken"
      | "acceptedTokens"
      | "acceptsToken"
      | "getAcceptedTokens"
      | "owner"
      | "removeToken"
      | "renounceOwnership"
      | "tokens"
      | "transferOwnership"
      | "verifyRelayedCall"
      | "versionVerifier"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptsToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcceptedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRelayedCall",
    values: [EnvelopingTypes.RelayRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "versionVerifier",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionVerifier",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IndividualAccountRelayVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IndividualAccountRelayVerifier;
  waitForDeployment(): Promise<this>;

  interface: IndividualAccountRelayVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  acceptedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  acceptsToken: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  getAcceptedTokens: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeToken: TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyRelayedCall: TypedContractMethod<
    [relayRequest: EnvelopingTypes.RelayRequestStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;

  versionVerifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "acceptsToken"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAcceptedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyRelayedCall"
  ): TypedContractMethod<
    [relayRequest: EnvelopingTypes.RelayRequestStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "versionVerifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

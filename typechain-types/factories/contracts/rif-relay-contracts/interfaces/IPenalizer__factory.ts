/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPenalizer,
  IPenalizerInterface,
} from "../../../../contracts/rif-relay-contracts/interfaces/IPenalizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "unsignedTx1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature1",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "unsignedTx2",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature2",
        type: "bytes",
      },
      {
        internalType: "contract IRelayHub",
        name: "hub",
        type: "address",
      },
    ],
    name: "penalizeRepeatedNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "versionPenalizer",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPenalizer__factory {
  static readonly abi = _abi;
  static createInterface(): IPenalizerInterface {
    return new Interface(_abi) as IPenalizerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPenalizer {
    return new Contract(address, _abi, runner) as unknown as IPenalizer;
  }
}
